<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oxide</title>
    <link>http://blog.oxide.ink/</link>
    <description>Recent content on Oxide</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 28 Aug 2022 18:03:53 +0800</lastBuildDate><atom:link href="http://blog.oxide.ink/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>T</title>
      <link>http://blog.oxide.ink/posts/t/</link>
      <pubDate>Sun, 28 Aug 2022 18:03:53 +0800</pubDate>
      
      <guid>http://blog.oxide.ink/posts/t/</guid>
      <description>Test </description>
    </item>
    
    <item>
      <title>Scala</title>
      <link>http://blog.oxide.ink/posts/bigdata/scala/</link>
      <pubDate>Fri, 02 Jul 2021 19:50:31 +0000</pubDate>
      
      <guid>http://blog.oxide.ink/posts/bigdata/scala/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ElasticSearch</title>
      <link>http://blog.oxide.ink/posts/db/elasticsearch/</link>
      <pubDate>Thu, 01 Jul 2021 20:58:36 +0000</pubDate>
      
      <guid>http://blog.oxide.ink/posts/db/elasticsearch/</guid>
      <description>概述 ES不等于搜索引擎 分布式的搜索,存储,数据分析引擎 优点: 面向开发者友好,屏蔽了Luncene的复杂特性,集群自动发现 自动维护数据在多个节点上的建立 帮我们做搜索请求的负载均衡 自动维护冗余副本,保证了部分节点宕机的情况下仍然不会有任何数据丢失 ES基于Lucene提供了很多高级功能:符合查询,聚合分析,基于地理位置 对于大公司,可以构建几百台服务器的大型分布式集群,处理PB级别数据 相遇传统数据库,提供了全文见检索,同义词处理,相关度排名,聚合分析以及海量数据的近实时(NTR)处理,这些传统数据库完全做不到 应用领域 搜索引擎 各大网站的用户行为日志(点击,浏览,收藏,评论) BI 数据分析 Github ELK (Elasticseach(数据存储) Logstash(日志采集) Kibana(可视化)) 核心概念和原理 搜索 SQL 用了%不能用索引 -&amp;gt;性能差 like % 搜索时间复杂度O(n) 不能分词 倒排索引 分词 生成相关度 * 排序 空间换时间 数据结构 document List 关键词在每个doc中出现的次数 TF term frequency 词频 IDF inverse doc frequency 关键词在当前doc出现的次数 每个doc的长度 越长相关度越低 包含这个关键词的所有doc的平均长度 核心概念 集群:每个集群至少包含两个节点 Node:集群中的节点 一个节点不代表是一台机器 Filed: 一个数据字段,与index和type可以定位一个doc Document:ES最小的数据单元 Json Type:逻辑上的数据分类 Index:一类相同或者相似的doc 分片shard 一个index包含多个shard,默认5p,默认每个p分配一个r,p的数量在创建索引的时候设置,如果想修改,需要重建索引 每个shard都是一个lucene实例,有完整的创建索引的处理请求能力 ES会自动在nodes尚未我们zuoshard均衡 一个doc不可能同时存在于多个PShard,但是可以同时多个Rshard p和对应的r不能同时存在于同一个节点,所以最低的可用配置是两台节点,互为主备 横向扩容 Parimary Shared Replica Shard 容错 两台机子p0,p1,p2 r0,r1,r2 p挂掉之后r顶上 容错机制 master选举 findMaster 脑裂 可能会产生多个master节点 判断自己是否为master 广播/findMaster replica容错 重启故障机 数据恢复 只拷贝新增数据 不是全量拷贝 使用 健康值检查 CRUD Query String search 类似于Url挂参数搜索 Query DSL Query and filter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 GET /_cat/health?</description>
    </item>
    
    <item>
      <title>Java并发编程</title>
      <link>http://blog.oxide.ink/posts/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Thu, 01 Jul 2021 20:58:36 +0000</pubDate>
      
      <guid>http://blog.oxide.ink/posts/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</guid>
      <description>基本概念 进程 线程 纤程(quasar) Java线程,详见Java笔记 补充,可以有lambda表达式写法 三种启动线程方式 Thread Runnable Executors.newCachedThread(本质也是调用上两个) sleep ,睡眠多少秒,其他线程可以运行 yield,加入等待队列,有可能立马还是自己 join , 调用另一个线程,保证顺序 interrupt , 抛出异常,处理catch 生命周期 新建：就是刚使用new方法，new出来的线程；
就绪：就是调用的线程的start()方法后，这时候线程处于等待CPU分配资源阶段，谁先抢的CPU资源，谁开始执行;
运行：当就绪的线程被调度并获得CPU资源时，便进入运行状态，run方法定义了线程的操作和功能;
阻塞：在运行状态的时候，可能因为某些原因导致运行状态的线程变成了阻塞状态，比如sleep()、wait()之后线程就处于了阻塞状态，这个时候需要其他机制将处于阻塞状态的线程唤醒，比如调用notify或者notifyAll()方法。唤醒的线程不会立刻执行run方法，它们要再次等待CPU分配资源进入运行状态;
销毁：如果线程正常执行完毕后或线程被提前强制性的终止或出现异常导致结束，那么线程就要被销毁，释放资源;
锁 常见锁 synchronized 可重入锁 synchronized(this) - &amp;gt; synchronized void m() ,static synchronized锁的是T.class -保证原子性和可见性 底层实现 锁升级 偏向锁 标记线程 自旋锁 自旋十次 消耗cpu,用户态 重量级锁 - OS,os等待队列,不占cpu,但要跟os交互,内核态 执行时间长,线程数多用系统锁 执行时间段(加锁代码),线程数少,用自旋锁 不能阻止指令重排序 异常会释放锁 Lock volatile(可变的) 保证线程可见性
MESI 缓存一致性协议 禁止指令重排序
DCL单例 Double Check Lock Mgr06.java loadfence原语指令 storefence原语指令 不能保证原子性
dirty read
锁写不锁读 优化,粗化,细化</description>
    </item>
    
    <item>
      <title>JVM-01</title>
      <link>http://blog.oxide.ink/posts/jvm/jvm-1/</link>
      <pubDate>Thu, 01 Jul 2021 20:58:36 +0000</pubDate>
      
      <guid>http://blog.oxide.ink/posts/jvm/jvm-1/</guid>
      <description>学术名词 TLAB (Thread Local Allocation Buffer) 垃圾回收器 分代 CMS +ParNew Serial+Serial Old Parallel Scavenge+Parallel Old 分区 G1 ZGC Shenandoah 调优 什么是调优 根据需求进行JVM规划和调优 优化运行JVM环境(慢,卡顿) 解决JVM运行过程中出现的各种问题(OOM) out of memery Java参数 标准参数 非标准参数 -X 调优 -XX 参数 -Xms200M 最小内存200M -Xmx200M 最大内存200M 设置成一样,防止内存抖动 -XX:+PrintGC 打印出来 -XX:+HeapDumpOnOutOfMemoryError 命令 java -Xms2M -Xmx2M -XX:+PrintGC problem jps 查看正在运行的编号 jinfo 编号查看进程信息 jstack jmap jstatus *arthas dashboard 仪表盘 jvm 类似jinfo thread 类似jstack thread -b 找死锁 heapdump 导出stack jad 即时反编译 redifine 重新替换class </description>
    </item>
    
    <item>
      <title>JVM-02</title>
      <link>http://blog.oxide.ink/posts/jvm/jvm-2/</link>
      <pubDate>Thu, 01 Jul 2021 20:58:36 +0000</pubDate>
      
      <guid>http://blog.oxide.ink/posts/jvm/jvm-2/</guid>
      <description>概念 jvm跟java无关 任何语言-&amp;gt;class-&amp;gt;JVM jvm是一种规范 虚构出来的计算机 字节码指令集(汇编语言) 内存管理:栈 堆 方法区等 常见的JVM实现 Hotspot Oracle官方,做实验用的jvm Jrockit BEA,最快jvm 被Oracle收购,合并于hotspot TaoBaoVM hotspot深度定制版 LiquidVM 直接针对硬件 azul zing 垃圾回收的业界标杆 J9 -IBM Microsoft VM JDK JRE JVM JDK = jre + development kit JRE = jvm + core lib JVM Class File Format 二进制字节流
数据类型 u1 u2 u4 u8 和_info
前八个16进制-&amp;gt;magic version
然后八个16进制-&amp;gt;minor version
然后四个16进制(2个字节)-&amp;gt; constant_pool_count
常量池 紧接constant_pool *
长度为constant_pool_count-1的表,从1开始,保留0 access_flags 定义类的那一排所代表的,例如public,final,implement,annotation
this_class
当前class文件 super_class
interfaces_count
interfaces
fields_count</description>
    </item>
    
    <item>
      <title>MySQL</title>
      <link>http://blog.oxide.ink/posts/db/mysql/</link>
      <pubDate>Thu, 01 Jul 2021 20:58:36 +0000</pubDate>
      
      <guid>http://blog.oxide.ink/posts/db/mysql/</guid>
      <description>介绍 数据是什么 如何存储 数据库引擎 innodb
myisam
memory
区别
innodb存储引擎数据跟索引文件放在一个文件中,myisam分为不同文件 innodb支持事务,myisam不支持事务 innodb支持表锁和行锁,myisam支持表锁 innodb有外键,myisam没有外键 索引的分类 主键索引 主键索引是一种唯一性索引,但它必须指定为primary key,每个表只能有一个主见 唯一索引 索引的列所有值都只能出现一次,即必须唯一,值可以为空 普通索引 基本的索引类型,值可以为空,没有唯一性限制 全文索引 全文索引类型为FULLTEXT,全文索引可以在varchar,char,text类型的列上创建 组合索引 多列值组成一个索引,专门用于组合搜索 回表 最左匹配原则 索引覆盖 索引下推 select * from t1 where age=? and gender=? 先根据age字段从存储引擎层将数据拉取回server层,然后在server层进行gender筛选,再从存储引擎层拉去数据的 时候,就会直接根据age,gender一起筛选 ##准备
数据库 云数据库
RDS,PolarDB,TDSQL NewSQL
TiDB 生产线
厂家 Oracle 官方 MariaDB Percona 5.6
5.6.36,5.6.38,5.6.40,5.6.46 5.7
5.7.20 22 24&amp;hellip;. 8.0
8.0.11,8.0.17,8.0.18 C:社区版
E:企业版
linux环境 mysql指令 数据初始化 mysqld --initialize-insecure --user=xxx --basedir=/app/database/mysql --datadir=/data/3306/ 有-insecure 初始化完成后,有12位临时密码,必须在使用mysql之前重置这个密码 密码管理使用严格模式: 3种密码复杂度,8位以上 SQL概述 Structured Query Language 用来跟数据库打交道,完成和数据库的通信,90%以上的SQL语句是通用的 数据库(notes.</description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>http://blog.oxide.ink/posts/db/redis/</link>
      <pubDate>Thu, 01 Jul 2021 20:58:36 +0000</pubDate>
      
      <guid>http://blog.oxide.ink/posts/db/redis/</guid>
      <description>安装&amp;amp;启动 server redis_6379 redis-server /etc/redis/6379.conf --loadmoudle client 入门 无数据类型 默认16个库(分为16个独立的区域) redis-cli -p xxxx -n [指定库] 方法与类型绑定 type 获取值的类型 二进制安全 字节流 字符流 redis-cli &amp;ndash;raw 格式化 help keys * flushall flushdb 数据类型 help @String
String encoding-str set 生存时间 nx - 不存在的时候赋值 xx - 存在的时候才能更新 get mset - 多个存 mget - 多个取 append - 追加 getrange [start] [end] 正反向索引 setrange 修改 strlen -&amp;gt; length msetnx 原子性多操作,一个失败就取消操作 encoding-int(省去之后计算的判断,本质还是字节流) incr +1 incrby [value] n decr [value] 减1 incrbyfloat [value] n 加浮点数 bitmap bitset 设置字节中的bit offset是指bit bitpos 第一个1 offset是指字节 bitcount offset是指字节 bitop List Lpush Rpush Lpop Rpop lrange Lindex Rindex Lrem Rrem llen blpop 阻塞队列,单播队列 先进先出 Ltrim Hash map(k-v) hset hget hgetall hincrby hincrybyfloat keys sean* set sadd scard 交集并集差集 sinter(store) sunion sdiff sismember smembers srandmember spop sorted_set zadd zrange # zrevrange # zrangebyscore zscore zrank zincrby 实时维护 交集并集差集 zunionstore weights 聚合指令 zremovebyscore zremovebyrank 滑动窗口 进阶 管道 echo -n &amp;quot;set k1 99\n incr k1 \n get k1&amp;quot; | nc xxxx 6379 建立tcp通信就能跟redis对话 发布/订阅 事务 transaction multi 开启事务 exec 执行事务 discard 取消事务 watch 乐观锁 cas A watch k1 multi get k1 keys * B muti keys * set k1 xxxxx exec Aexec 数据被b修改过 不执行事务 缓存穿透 module redisbloom bloom过滤器 布谷鸟过滤器 counting bloom 查找没有的东西 缓存和数据库的区别 config 内存 回收策略 noeviction 不丢,做数据库用 lfu 碰了多少次 lru 多久没碰 random ttl 有效期 ttl 按存活时间来 ttl + key 存活时间 key的有效期,访问延长?</description>
    </item>
    
    <item>
      <title>算法</title>
      <link>http://blog.oxide.ink/posts/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 01 Jul 2021 20:58:36 +0000</pubDate>
      
      <guid>http://blog.oxide.ink/posts/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/</guid>
      <description>基础 工具 对数器
一个想要测的方法a 实现复杂度不好但是容易实现的方法b 实现一个随机样本产生器 方法a和方法b相同的随机样本,看看得到的结果是否一样 如果一个随机样本使得比对结果不一致,打印样本进行人工干预,改对方法a和方法b 当样本数量很多时对比测试依然正确,可以确定方法a已经正确 比较器
比较器的实质是重载比较运算符 比较器可以很好的应用在特殊标准的排序上 比较器可以很好的应用在根据特殊标准排序的结构上 PriorityQueue 小根堆转大根堆 写代码变得异常容易,还用于泛型编程 运算 异或运算,二进制无进位相加 性质:0^N=N,N^N=0 满足交换律和结合律(同一批数异或答案一样,无论顺序) ab互换 a = a^b b = a^b a = a^b ab必须指向不同内存 提取最右侧1 N&amp;amp;((~N)+1) N与((N取反)+1) 排序 桶排序 数据状况强相关 -计数排序 设数组,累加 基数排序 非负十进制 添0,入桶出桶 权重逆着 排序算法的稳定性 稳定性是指同样大小的样本再排序之后不会改变相对次序 对基础类型来说,稳定性毫无意义 对非基础类型来说,稳定性有重要意义 有些算法可以实现成稳定的,而有些排序算法无论如何都实现不成稳定的 有稳定性: -处理相等情况时的策略 冒泡排序 插入排序 归并排序 桶排序 十分稳定 基数排序 计数排序 无稳定性: 选择排序 快排 partition过程必破坏稳定性 堆排 序算法总结 不基于比较的排序,对样本数据有严格的要求,不易改写 基于比较的排序,只要规定好两个样本怎么比大小就可以直接复用 基于比较的排序,时间复杂度的极限是O(NlogN) 时间复杂度O(NlogN),额外空间复杂度低于O(N),且稳定的基于比较的排序是不存在的 为了绝对的速度选快排,为了省空间选堆排,为了稳定选归并 小规模用常数项小的排序,例如插入排序,大规模用调度优秀的排序,如快排 常见的坑 归并排序的额外空间复杂度可以变成O(1),&amp;ldquo;归并排序 内部缓存法&amp;rdquo;,但是将变得不再稳定 -&amp;gt;直接堆排 &amp;ldquo;原地归并排序&amp;quot;是垃圾帖,会让时间复杂度变成O(N^2) -&amp;gt;插入排序 快排稳定性改进,&amp;ldquo;01 stable sort&amp;rdquo;,但是会对样本数据要求更多 -&amp;gt;桶排序 在整数数组中,请把奇数放在数组左边,偶数放在数组右边,要求所有奇数之间,偶数之间的原始相对次序不变 时间复杂度做到O(N).</description>
    </item>
    
    <item>
      <title>Java笔记01</title>
      <link>http://blog.oxide.ink/posts/java/java%E7%AC%94%E8%AE%B001/</link>
      <pubDate>Tue, 08 Jun 2021 20:58:36 +0800</pubDate>
      
      <guid>http://blog.oxide.ink/posts/java/java%E7%AC%94%E8%AE%B001/</guid>
      <description>idea ctrl+shift+v:替换变量名 ctrl+alt+v:抽取并赋值 ctrl+p:查看参数 ctrl+alt+o删除多余包 ctrl+F12 查看当前类中的包 ctrl+shift+enter 自动完成当前语句 ctrl+shift+backspace 返回到上次修改位置 alt+shift+F9 Debug 类转型&amp;amp;多态&amp;amp;契约设计 类转型：子类可以转父类，父类不可以转子类（除非父类对象本身就是子类） 多态：子类转型为父类后，调用普通方法，依旧是子类方法 契约设计：类不会直接使用另一个类，而是采用接口的形式，外部可以“空投”这个接口下的任意子类对象 static、final 和常量设计 static static 变量：不管有多少个对象，内存中只有一份 static 方法：可以使用类名直接引用，无需 new 对象来引用 静态方法不可以调用动态变量 非静态方法可以调用静态方法 静态方法不可调用非静态方法 static 块：static 块只执行一次，并且 static 块&amp;gt;匿名块&amp;gt;构造函数 单例模式 设计模式：是经过验证的、用于某些特定场合的解决方案 GOF 提出 23 中设计模式；创建型、结构性和行为型 单例模式保证一个类在内存空间中只有一个对象 内部初始化一个单例 private 不可见，getInstance(static 方法)来取出单例对象 final final 类：没有子类继承 final 方法：不能被子类改写（不能重写，可以重载） final 字段：基本类型被能修改值，对象类型不能修改指针（可以修改内容） 常量&amp;amp;常量池 java 中的常量：static 和 final notes.Java 接口中的变量都是常量 对象生成有两种：常量赋值（栈内存）和 new 创建（堆内存） 常见包装类 java 编译器会优化已经确定的变量 栈内存与堆内存运算会产生新的堆内存（存疑） 不可变对象 不可变对象提高读效率 不可变对象设计的方法 字符串 append 操作速度：StringBuilder&amp;gt;StringBuffer&amp;gt;String notes.</description>
    </item>
    
    <item>
      <title>Java笔记02</title>
      <link>http://blog.oxide.ink/posts/java/java%E7%AC%94%E8%AE%B002/</link>
      <pubDate>Tue, 08 Jun 2021 20:58:36 +0800</pubDate>
      
      <guid>http://blog.oxide.ink/posts/java/java%E7%AC%94%E8%AE%B002/</guid>
      <description>Maven Junit 测试 单元测试：对软件中最小可测试单元进行检查和验证，通常是一个函数/方法（属于白盒测试）
集成测试： 将多个单元相互作用，形成一个整体，对整体协调性进行测试 白盒测试： 全面了解程序内部逻辑结构，对所有的逻辑路径都进行测试，一般由程序员完成
黑盒测试：又名功能测试，将程序看作不可打开的盒子，一般由独立使用者完成 自动测试：用程序批量、反复的测试程序，并可自动检查程序结果是否满足预定的要求
手动测试：手动执行程序，手动输入所需要的参数，手动检查程序结果是否满足预定的要求 回归测试：修改旧代码后，重新进行测试以确认修改没有引入新的错误或导致其他代码产生错误
深入学习：软件测试-基于问题驱动模式 朱少民
Junit import static 导入该包内的所有静态方法，使用时可不加类名
Triangle
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package JavaLearning_Advanced.Maven; /** * @Description: * @author: Anhlaidh * @date: 2020/3/23 0023 13:42 */ public class Triangle { public boolean judgeEdges(int a, int b, int c) { boolean result = true; //边长非负性 if (a &amp;lt;= 0 || b &amp;lt;= 0 || c &amp;lt;= 0) { return false; } //两边和大于第三边 if (a+b&amp;lt;=c) { return false;} if (b+c&amp;lt;=a) { return false;} if (c+a&amp;lt;=b) { return false;} return true; } } testTriangle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import JavaLearning_Advanced.</description>
    </item>
    
    <item>
      <title>Java笔记03</title>
      <link>http://blog.oxide.ink/posts/java/java%E7%AC%94%E8%AE%B003/</link>
      <pubDate>Tue, 08 Jun 2021 20:58:36 +0800</pubDate>
      
      <guid>http://blog.oxide.ink/posts/java/java%E7%AC%94%E8%AE%B003/</guid>
      <description>语法糖 Syntactic sugar jdk版本 编译级别 兼容级别 编译后高版本可以运行低版本字节码 反之不行 for/for-each for for(int i=0;i&amp;lt;nums.leng;i++) 可以删除元素 for-each for(String i:hs) 5.0开始存在 语法简洁 不能删除元素 只能正向遍历 不能同时遍历两个集合 enum类型 java5 推出 enum有多少个值就有几个实例对象 可以添加属性/构造函数/方法 构造函数只能是package-private(default)或者private,内部调用 enum类型 所有enum类型都是Enum的子类,也继承了相应方法 ordinal()返回枚举所在的索引位置,从0开始 compareTo()比较两个枚举值的索引位置大小 toString()返回枚举值的字符串标识 valueOf()将字符串初始化为枚举对象 values() 返回所有的枚举值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 package notes.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.oxide.ink/links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.oxide.ink/links/</guid>
      <description>萝卜博客 https://radish.cloud</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.oxide.ink/posts/hugo-extend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.oxide.ink/posts/hugo-extend/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Archive</title>
      <link>http://blog.oxide.ink/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.oxide.ink/archives/</guid>
      <description>archives</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>http://blog.oxide.ink/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.oxide.ink/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
