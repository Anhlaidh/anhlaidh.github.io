<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Oxide</title>
    <link>http://blog.oxide.ink/tags/java/</link>
    <description>Recent content in Java on Oxide</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 01 Jul 2021 20:58:36 +0000</lastBuildDate><atom:link href="http://blog.oxide.ink/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java并发编程</title>
      <link>http://blog.oxide.ink/posts/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Thu, 01 Jul 2021 20:58:36 +0000</pubDate>
      
      <guid>http://blog.oxide.ink/posts/java/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</guid>
      <description>基本概念 进程 线程 纤程(quasar) Java线程,详见Java笔记 补充,可以有lambda表达式写法 三种启动线程方式 Thread Runnable Executors.newCachedThread(本质也是调用上两个) sleep ,睡眠多少秒,其他线程可以运行 yield,加入等待队列,有可能立马还是自己 join , 调用另一个线程,保证顺序 interrupt , 抛出异常,处理catch 生命周期 新建：就是刚使用new方法，new出来的线程；
就绪：就是调用的线程的start()方法后，这时候线程处于等待CPU分配资源阶段，谁先抢的CPU资源，谁开始执行;
运行：当就绪的线程被调度并获得CPU资源时，便进入运行状态，run方法定义了线程的操作和功能;
阻塞：在运行状态的时候，可能因为某些原因导致运行状态的线程变成了阻塞状态，比如sleep()、wait()之后线程就处于了阻塞状态，这个时候需要其他机制将处于阻塞状态的线程唤醒，比如调用notify或者notifyAll()方法。唤醒的线程不会立刻执行run方法，它们要再次等待CPU分配资源进入运行状态;
销毁：如果线程正常执行完毕后或线程被提前强制性的终止或出现异常导致结束，那么线程就要被销毁，释放资源;
锁 常见锁 synchronized 可重入锁 synchronized(this) - &amp;gt; synchronized void m() ,static synchronized锁的是T.class -保证原子性和可见性 底层实现 锁升级 偏向锁 标记线程 自旋锁 自旋十次 消耗cpu,用户态 重量级锁 - OS,os等待队列,不占cpu,但要跟os交互,内核态 执行时间长,线程数多用系统锁 执行时间段(加锁代码),线程数少,用自旋锁 不能阻止指令重排序 异常会释放锁 Lock volatile(可变的) 保证线程可见性
MESI 缓存一致性协议 禁止指令重排序
DCL单例 Double Check Lock Mgr06.java loadfence原语指令 storefence原语指令 不能保证原子性
dirty read
锁写不锁读 优化,粗化,细化</description>
    </item>
    
    <item>
      <title>Java笔记01</title>
      <link>http://blog.oxide.ink/posts/java/java%E7%AC%94%E8%AE%B001/</link>
      <pubDate>Tue, 08 Jun 2021 20:58:36 +0800</pubDate>
      
      <guid>http://blog.oxide.ink/posts/java/java%E7%AC%94%E8%AE%B001/</guid>
      <description>idea ctrl+shift+v:替换变量名 ctrl+alt+v:抽取并赋值 ctrl+p:查看参数 ctrl+alt+o删除多余包 ctrl+F12 查看当前类中的包 ctrl+shift+enter 自动完成当前语句 ctrl+shift+backspace 返回到上次修改位置 alt+shift+F9 Debug 类转型&amp;amp;多态&amp;amp;契约设计 类转型：子类可以转父类，父类不可以转子类（除非父类对象本身就是子类） 多态：子类转型为父类后，调用普通方法，依旧是子类方法 契约设计：类不会直接使用另一个类，而是采用接口的形式，外部可以“空投”这个接口下的任意子类对象 static、final 和常量设计 static static 变量：不管有多少个对象，内存中只有一份 static 方法：可以使用类名直接引用，无需 new 对象来引用 静态方法不可以调用动态变量 非静态方法可以调用静态方法 静态方法不可调用非静态方法 static 块：static 块只执行一次，并且 static 块&amp;gt;匿名块&amp;gt;构造函数 单例模式 设计模式：是经过验证的、用于某些特定场合的解决方案 GOF 提出 23 中设计模式；创建型、结构性和行为型 单例模式保证一个类在内存空间中只有一个对象 内部初始化一个单例 private 不可见，getInstance(static 方法)来取出单例对象 final final 类：没有子类继承 final 方法：不能被子类改写（不能重写，可以重载） final 字段：基本类型被能修改值，对象类型不能修改指针（可以修改内容） 常量&amp;amp;常量池 java 中的常量：static 和 final notes.Java 接口中的变量都是常量 对象生成有两种：常量赋值（栈内存）和 new 创建（堆内存） 常见包装类 java 编译器会优化已经确定的变量 栈内存与堆内存运算会产生新的堆内存（存疑） 不可变对象 不可变对象提高读效率 不可变对象设计的方法 字符串 append 操作速度：StringBuilder&amp;gt;StringBuffer&amp;gt;String notes.</description>
    </item>
    
    <item>
      <title>Java笔记02</title>
      <link>http://blog.oxide.ink/posts/java/java%E7%AC%94%E8%AE%B002/</link>
      <pubDate>Tue, 08 Jun 2021 20:58:36 +0800</pubDate>
      
      <guid>http://blog.oxide.ink/posts/java/java%E7%AC%94%E8%AE%B002/</guid>
      <description>Maven Junit 测试 单元测试：对软件中最小可测试单元进行检查和验证，通常是一个函数/方法（属于白盒测试）
集成测试： 将多个单元相互作用，形成一个整体，对整体协调性进行测试 白盒测试： 全面了解程序内部逻辑结构，对所有的逻辑路径都进行测试，一般由程序员完成
黑盒测试：又名功能测试，将程序看作不可打开的盒子，一般由独立使用者完成 自动测试：用程序批量、反复的测试程序，并可自动检查程序结果是否满足预定的要求
手动测试：手动执行程序，手动输入所需要的参数，手动检查程序结果是否满足预定的要求 回归测试：修改旧代码后，重新进行测试以确认修改没有引入新的错误或导致其他代码产生错误
深入学习：软件测试-基于问题驱动模式 朱少民
Junit import static 导入该包内的所有静态方法，使用时可不加类名
Triangle
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 package JavaLearning_Advanced.Maven; /** * @Description: * @author: Anhlaidh * @date: 2020/3/23 0023 13:42 */ public class Triangle { public boolean judgeEdges(int a, int b, int c) { boolean result = true; //边长非负性 if (a &amp;lt;= 0 || b &amp;lt;= 0 || c &amp;lt;= 0) { return false; } //两边和大于第三边 if (a+b&amp;lt;=c) { return false;} if (b+c&amp;lt;=a) { return false;} if (c+a&amp;lt;=b) { return false;} return true; } } testTriangle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import JavaLearning_Advanced.</description>
    </item>
    
    <item>
      <title>Java笔记03</title>
      <link>http://blog.oxide.ink/posts/java/java%E7%AC%94%E8%AE%B003/</link>
      <pubDate>Tue, 08 Jun 2021 20:58:36 +0800</pubDate>
      
      <guid>http://blog.oxide.ink/posts/java/java%E7%AC%94%E8%AE%B003/</guid>
      <description>语法糖 Syntactic sugar jdk版本 编译级别 兼容级别 编译后高版本可以运行低版本字节码 反之不行 for/for-each for for(int i=0;i&amp;lt;nums.leng;i++) 可以删除元素 for-each for(String i:hs) 5.0开始存在 语法简洁 不能删除元素 只能正向遍历 不能同时遍历两个集合 enum类型 java5 推出 enum有多少个值就有几个实例对象 可以添加属性/构造函数/方法 构造函数只能是package-private(default)或者private,内部调用 enum类型 所有enum类型都是Enum的子类,也继承了相应方法 ordinal()返回枚举所在的索引位置,从0开始 compareTo()比较两个枚举值的索引位置大小 toString()返回枚举值的字符串标识 valueOf()将字符串初始化为枚举对象 values() 返回所有的枚举值 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 package notes.</description>
    </item>
    
  </channel>
</rss>
