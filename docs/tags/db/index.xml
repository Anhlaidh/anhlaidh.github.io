<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DB on Oxide</title>
    <link>http://blog.oxide.ink/tags/db/</link>
    <description>Recent content in DB on Oxide</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 01 Jul 2021 20:58:36 +0000</lastBuildDate><atom:link href="http://blog.oxide.ink/tags/db/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ElasticSearch</title>
      <link>http://blog.oxide.ink/posts/db/elasticsearch/</link>
      <pubDate>Thu, 01 Jul 2021 20:58:36 +0000</pubDate>
      
      <guid>http://blog.oxide.ink/posts/db/elasticsearch/</guid>
      <description>概述 ES不等于搜索引擎 分布式的搜索,存储,数据分析引擎 优点: 面向开发者友好,屏蔽了Luncene的复杂特性,集群自动发现 自动维护数据在多个节点上的建立 帮我们做搜索请求的负载均衡 自动维护冗余副本,保证了部分节点宕机的情况下仍然不会有任何数据丢失 ES基于Lucene提供了很多高级功能:符合查询,聚合分析,基于地理位置 对于大公司,可以构建几百台服务器的大型分布式集群,处理PB级别数据 相遇传统数据库,提供了全文见检索,同义词处理,相关度排名,聚合分析以及海量数据的近实时(NTR)处理,这些传统数据库完全做不到 应用领域 搜索引擎 各大网站的用户行为日志(点击,浏览,收藏,评论) BI 数据分析 Github ELK (Elasticseach(数据存储) Logstash(日志采集) Kibana(可视化)) 核心概念和原理 搜索 SQL 用了%不能用索引 -&amp;gt;性能差 like % 搜索时间复杂度O(n) 不能分词 倒排索引 分词 生成相关度 * 排序 空间换时间 数据结构 document List 关键词在每个doc中出现的次数 TF term frequency 词频 IDF inverse doc frequency 关键词在当前doc出现的次数 每个doc的长度 越长相关度越低 包含这个关键词的所有doc的平均长度 核心概念 集群:每个集群至少包含两个节点 Node:集群中的节点 一个节点不代表是一台机器 Filed: 一个数据字段,与index和type可以定位一个doc Document:ES最小的数据单元 Json Type:逻辑上的数据分类 Index:一类相同或者相似的doc 分片shard 一个index包含多个shard,默认5p,默认每个p分配一个r,p的数量在创建索引的时候设置,如果想修改,需要重建索引 每个shard都是一个lucene实例,有完整的创建索引的处理请求能力 ES会自动在nodes尚未我们zuoshard均衡 一个doc不可能同时存在于多个PShard,但是可以同时多个Rshard p和对应的r不能同时存在于同一个节点,所以最低的可用配置是两台节点,互为主备 横向扩容 Parimary Shared Replica Shard 容错 两台机子p0,p1,p2 r0,r1,r2 p挂掉之后r顶上 容错机制 master选举 findMaster 脑裂 可能会产生多个master节点 判断自己是否为master 广播/findMaster replica容错 重启故障机 数据恢复 只拷贝新增数据 不是全量拷贝 使用 健康值检查 CRUD Query String search 类似于Url挂参数搜索 Query DSL Query and filter 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 GET /_cat/health?</description>
    </item>
    
    <item>
      <title>MySQL</title>
      <link>http://blog.oxide.ink/posts/db/mysql/</link>
      <pubDate>Thu, 01 Jul 2021 20:58:36 +0000</pubDate>
      
      <guid>http://blog.oxide.ink/posts/db/mysql/</guid>
      <description>介绍 数据是什么 如何存储 数据库引擎 innodb
myisam
memory
区别
innodb存储引擎数据跟索引文件放在一个文件中,myisam分为不同文件 innodb支持事务,myisam不支持事务 innodb支持表锁和行锁,myisam支持表锁 innodb有外键,myisam没有外键 索引的分类 主键索引 主键索引是一种唯一性索引,但它必须指定为primary key,每个表只能有一个主见 唯一索引 索引的列所有值都只能出现一次,即必须唯一,值可以为空 普通索引 基本的索引类型,值可以为空,没有唯一性限制 全文索引 全文索引类型为FULLTEXT,全文索引可以在varchar,char,text类型的列上创建 组合索引 多列值组成一个索引,专门用于组合搜索 回表 最左匹配原则 索引覆盖 索引下推 select * from t1 where age=? and gender=? 先根据age字段从存储引擎层将数据拉取回server层,然后在server层进行gender筛选,再从存储引擎层拉去数据的 时候,就会直接根据age,gender一起筛选 ##准备
数据库 云数据库
RDS,PolarDB,TDSQL NewSQL
TiDB 生产线
厂家 Oracle 官方 MariaDB Percona 5.6
5.6.36,5.6.38,5.6.40,5.6.46 5.7
5.7.20 22 24&amp;hellip;. 8.0
8.0.11,8.0.17,8.0.18 C:社区版
E:企业版
linux环境 mysql指令 数据初始化 mysqld --initialize-insecure --user=xxx --basedir=/app/database/mysql --datadir=/data/3306/ 有-insecure 初始化完成后,有12位临时密码,必须在使用mysql之前重置这个密码 密码管理使用严格模式: 3种密码复杂度,8位以上 SQL概述 Structured Query Language 用来跟数据库打交道,完成和数据库的通信,90%以上的SQL语句是通用的 数据库(notes.</description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>http://blog.oxide.ink/posts/db/redis/</link>
      <pubDate>Thu, 01 Jul 2021 20:58:36 +0000</pubDate>
      
      <guid>http://blog.oxide.ink/posts/db/redis/</guid>
      <description>安装&amp;amp;启动 server redis_6379 redis-server /etc/redis/6379.conf --loadmoudle client 入门 无数据类型 默认16个库(分为16个独立的区域) redis-cli -p xxxx -n [指定库] 方法与类型绑定 type 获取值的类型 二进制安全 字节流 字符流 redis-cli &amp;ndash;raw 格式化 help keys * flushall flushdb 数据类型 help @String
String encoding-str set 生存时间 nx - 不存在的时候赋值 xx - 存在的时候才能更新 get mset - 多个存 mget - 多个取 append - 追加 getrange [start] [end] 正反向索引 setrange 修改 strlen -&amp;gt; length msetnx 原子性多操作,一个失败就取消操作 encoding-int(省去之后计算的判断,本质还是字节流) incr +1 incrby [value] n decr [value] 减1 incrbyfloat [value] n 加浮点数 bitmap bitset 设置字节中的bit offset是指bit bitpos 第一个1 offset是指字节 bitcount offset是指字节 bitop List Lpush Rpush Lpop Rpop lrange Lindex Rindex Lrem Rrem llen blpop 阻塞队列,单播队列 先进先出 Ltrim Hash map(k-v) hset hget hgetall hincrby hincrybyfloat keys sean* set sadd scard 交集并集差集 sinter(store) sunion sdiff sismember smembers srandmember spop sorted_set zadd zrange # zrevrange # zrangebyscore zscore zrank zincrby 实时维护 交集并集差集 zunionstore weights 聚合指令 zremovebyscore zremovebyrank 滑动窗口 进阶 管道 echo -n &amp;quot;set k1 99\n incr k1 \n get k1&amp;quot; | nc xxxx 6379 建立tcp通信就能跟redis对话 发布/订阅 事务 transaction multi 开启事务 exec 执行事务 discard 取消事务 watch 乐观锁 cas A watch k1 multi get k1 keys * B muti keys * set k1 xxxxx exec Aexec 数据被b修改过 不执行事务 缓存穿透 module redisbloom bloom过滤器 布谷鸟过滤器 counting bloom 查找没有的东西 缓存和数据库的区别 config 内存 回收策略 noeviction 不丢,做数据库用 lfu 碰了多少次 lru 多久没碰 random ttl 有效期 ttl 按存活时间来 ttl + key 存活时间 key的有效期,访问延长?</description>
    </item>
    
  </channel>
</rss>
